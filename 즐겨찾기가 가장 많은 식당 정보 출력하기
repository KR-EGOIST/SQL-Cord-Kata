/*
GROUP BY로 묶으면 가장 상단에 있는 데이터들을 임의로 가져옵니다.

SELECT * FROM REST_INFO;
위의 쿼리를 실행해보면 REST_ID 순으로 정렬된 테이블이 나옵니다.
여기서 GROUP BY FOOD_TYPE으로 묶으면 한식의 맨 첫번째, 일식의 맨 첫번째 ... 를 가져옵니다.
(문제에서 요구하는 즐겨찾기 수가 가장 많은 식당의 정보가 아닌 테이블에서 가장 상단의 식당 정보를 가져오는 거죠)

올려주신 쿼리대로 실행하면
한식, 중식, 양식, 분식은 임의로 가져온 가장 상단의 값이 운좋게 답과 일치하지만
일식은 답과 다른 REST_ID, REST_NAME값을 가져오게 됩니다.

SELECT FOOD_TYPE, REST_ID, REST_NAME, FAVORITES, MAX(FAVORITES)
FROM REST_INFO
GROUP BY FOOD_TYPE
ORDER BY FOOD_TYPE DESC;
위 쿼리는 올려주신 쿼리에서 SELECT 절에 FAVORITES만 추가한 쿼리입니다.
실행해보시면 일식 식당의 FAVORITES값이 잘못되었다는 것을 알 수 있을 겁니다.
*/

/*
GROUP BY
컬럼을 그룹핑해준다
이 글을 쓰게 만든  이유인데 GROUP BY로 묶으면 가장 상단에 있는 데이터들을 임의로 가져옵니다.
고로 SELECT에 MAX를 해도 최대값을 가져오는것이 아닌 그룹화된 테이블 가장 상단을 가져오게 된다 
*/

/*
즉 GROUP BY 후 그냥 MAX를 해버리면 이는 최대값이 아니라 테이블 최상단 값을 가져와서 
서브쿼리로 최대 값을 따로 찾아준다 ! 
*/

/*
조회 : SELECT
테이블 선택 : FROM
조건 : WHERE
조건의 서브쿼리 : IN (...)
그룹 : GROUP BY
정렬 : ORDER BY
내림차순 : DESC
*/

SELECT FOOD_TYPE, REST_ID, REST_NAME, FAVORITES
FROM REST_INFO
WHERE (FOOD_TYPE, FAVORITES) IN (SELECT FOOD_TYPE, MAX(FAVORITES)
                                FROM REST_INFO
                                GROUP BY FOOD_TYPE)
ORDER BY FOOD_TYPE DESC
