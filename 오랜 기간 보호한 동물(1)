/*
LEFT JOIN 을 이용한 풀이 

ANIMAL_INS 테이블이 동물 보호소에 들어온 동물의 정보를 담은 테이블
ANIMAL_OUTS 테이블이 동물 보호소에서 입양 보낸 동물의 정보를 담은 테이블
ANIMAL_INS 테이블에 ANIMAL_OUTS 테이블을 LEFT JOIN 한 후 입양을 못 간 동물을 골라내야 하므로 ANIMAL_OUTS 테이블의 DATETIME 값이 NULL 인 데이터들만 조회
보호 시작일 순으로 정렬해야하므로 DATETIME 으로 오름차순 정렬
가장 오래 보호소에 있었던 동물 3마리를 조회하기 위해 LIMIT 3
*/

SELECT A.NAME, A.DATETIME
FROM ANIMAL_INS A
     LEFT JOIN ANIMAL_OUTS B
     ON A.ANIMAL_ID = B.ANIMAL_ID
WHERE B.DATETIME IS NULL
ORDER BY DATETIME
LIMIT 3

//==================================================================

/*
NOT EXISTS 를 사용해 서브쿼리의 조건에 맞지 않는 행을 구하는 풀이

ANIMAL_INS 와 ANIMAL_OUTS 테이블에 모두 존재하는 ANIMAL_ID는 동물보호소에 들어왔다가 입양을 보낸 동물이기 때문에 NOT EXISTS를 사용해 입양을 보내지 않은 동물들을 구할 수 있다.
*/

SELECT NAME, DATETIME FROM ANIMAL_INS A
WHERE NOT EXISTS (SELECT ANIMAL_ID
                  FROM ANIMAL_OUTS B
                  WHERE A.ANIMAL_ID = B.ANIMAL_ID)
ORDER BY DATETIME
LIMIT 3

//==================================================================

/*
NOT IN 을 사용해 ANIMAL_OUTS 에 존재하지 않는 동물(입양가지 않은 동물)을 알 수 있다.

서브쿼리에 입양을 보낸 ANIMAL_ID 에 해당하지 않는 행을 구하면 입양을 가지 않은 동물과 같다고 할 수 있다.
*/

SELECT NAME, DATETIME
FROM ANIMAL_INS
WHERE ANIMAL_ID NOT IN (SELECT ANIMAL_ID
                       FROM ANIMAL_OUTS)
ORDER BY DATETIME
LIMIT 3
